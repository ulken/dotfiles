RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
BLUE="$(tput setaf 4)"
MAGENTA="$(tput setaf 5)"
CYAN="$(tput setaf 6)"
WHITE="$(tput setaf 7)"
GRAY="$(tput setaf 8)"
BOLD="$(tput bold)"
UNDERLINE="$(tput sgr 0 1)"
INVERT="$(tput sgr 1 0)"
NOCOLOR="$(tput sgr0)"

local_username="ulken"

# User color
case $(id -u) in
	0) user_color="$WHITE" ;;  # root
	*) user_color="$CYAN" ;;
esac

# Symbols
prompt_symbol="❯"
prompt_dirty_symbol="* "

# Used to _not_ print initial newline in fresh shells
first_prompt=1

function prompt_command() {
	# Local or SSH session?
	local remote=
	[ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ] && remote=1

    # Only show git status if installed
    local git_prompt=
    if command -v git >/dev/null 2>&1; then
        # git branch name and work tree status (only when we are inside git working tree)
        if [[ "true" = "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]]; then
            # Branch name
            local branch="$(git symbolic-ref HEAD 2>/dev/null)"
            branch="${branch##refs/heads/}"

            # Working tree status (red when dirty)
            local dirty=
            # Modified files
            git diff --no-ext-diff --quiet --exit-code --ignore-submodules 2>/dev/null || dirty=1
            # Untracked files
            [ -z "$dirty" ] && test -n "$(git status --porcelain --ignore-submodules -unormal)" && dirty=1

            # Format git info
            [ -n "$dirty" ] && git_prompt=" $GRAY$branch$prompt_dirty_symbol$NOCOLOR"
        fi
	fi

	# Only show username if not default
	local user_prompt=
	[ "$USER" != "$local_username" ] && user_prompt="$user_color$USER$NOCOLOR"

	# Show hostname inside SSH session
	local host_prompt=
	[ -n "$remote" ] && host_prompt="@$YELLOW$HOSTNAME$NOCOLOR"

	# Show delimiter if user or host visible
	local login_delimiter=
	[ -n "$user_prompt" ] || [ -n "$host_prompt" ] && login_delimiter="@"

	# Format prompt
	first_line="$user_prompt$host_prompt$login_delimiter$BLUE\w$NOCOLOR$git_prompt"
	# Don't print initial newline in fresh shells
	if [ $first_prompt = 1 ]; then first_prompt=0; else first_line="\n$first_line"; fi
	# Text (commands) inside \[...\] does not impact line length calculation which fixes strange bug when looking through the history
	# $? is a status of last command, should be processed every time prompt prints
	second_line="\`if [ \$? = 0 ]; then echo \[\$GREEN\]; else echo \[\$RED\]; fi\`\$prompt_symbol\[\$NOCOLOR\] "
	PS1="$first_line\n$second_line"

	# Multiline command
	PS2="\[$GREEN\]$prompt_symbol\[$NOCOLOR\] "

	# Terminal title
	local title="$(basename "$PWD")"
	[ -n "$remote" ] && title="$title \xE2\x80\x94 $HOSTNAME"
	echo -ne "\033]0;$title"; echo -ne "\007"
}

PROMPT_COMMAND=prompt_command
